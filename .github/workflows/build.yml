# Stole from ArmCord repo >:)
name: Release build
on: workflow_dispatch

env:
  FORCE_COLOR: true

jobs:
    build-linux:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Use Node.js 18
              uses: actions/setup-node@v2
              with:
                  node-version: 18

            - name: Install Node dependencies
              run: npm install

            - name: Install Electron-Builder
              run: npm install -g electron-builder

            - name: Build
              run: electron-builder --linux tar.gz
              env:
                GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: List all files in the dist directory
              run: ls -l dist
            - name: Delete unpacked builds
              run: rm -rf dist/linux-unpacked
            - name: Upload artifact
              uses: actions/upload-artifact@v2
              with:
                  name: OrbitNX-linux
                  path: dist/

    build-windows:
        runs-on: windows-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Use Node.js 18
              uses: actions/setup-node@v2
              with:
                  node-version: 18

            - name: Install Node dependencies
              run: npm install

            - name: Install Electron-Builder
              run: npm install -g electron-builder

            - name: Build
              run: electron-builder --windows zip:ia32 zip:x64
              env:
                GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: Delete unpacked builds
              run: Remove-Item -LiteralPath ".\dist\win-unpacked" -Force -Recurse
            - name: Upload artifact
              uses: actions/upload-artifact@v2
              with:
                  name: OrbitNX-win
                  path: dist/

    release:
        runs-on: ubuntu-latest
        needs: [build-linux, build-windows]

        steps:
            - uses: actions/download-artifact@v2
              with:
                  name: OrbitNX-win
                  path: windows
            - uses: actions/download-artifact@v2
              with:
                  name: OrbitNX-linux
                  path: linux
            - name: ls
              run: ls
            - name: Delete unwanted directories
              run: rm -rf {linux,windows}/*/
                   rm -rf {linux,windows}/.icon*
                   rm -rf {linux,windows}/builder-debug.yml
            - name: ls dirs
              run: ls linux && ls windows 
            - name: Get some values needed for the release
              id: vars
              shell: bash
              run: |
                echo "::set-output name=releaseTag::$(git describe --tags --abbrev=0)"

            - name: Create Release
              uses: actions/github-script@v2
              with:
                github-token: ${{secrets.GITHUB_TOKEN}}
                script: |
                  console.log('environment', process.versions);
                  
                  const fs = require('fs').promises;
                  
                  const { repo: { owner, repo }, sha } = context;
                  console.log({ owner, repo, sha });

                  const release = await github.repos.createRelease({
                    owner, repo,
                    tag_name: process.env.releaseTag,
                    draft: true,
                    target_commitish: sha
                  });

                  console.log('created release', { release });
              
                  for (let file of await fs.readdir('linux')) {
                    // do whatever filtering you want here, I'm just uploading all the files
                    console.log('uploading', file);
                    await github.repos.uploadReleaseAsset({
                      owner, repo,
                      release_id: release.data.id,
                      name: file,
                      data: await fs.readFile(`./linux/${file}`)
                    });    
                  }
                  for (let file of await fs.readdir('windows')) {
                    // do whatever filtering you want here, I'm just uploading all the files
                    console.log('uploading', file);
                    await github.repos.uploadReleaseAsset({
                      owner, repo,
                      release_id: release.data.id,
                      name: file,
                      data: await fs.readFile(`./windows/${file}`)
                    });    
                  }
              env:
                releaseTag: ${{ steps.vars.outputs.releaseTag }}